__d(function (global, _require, module, exports, _dependencyMap) {
  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _resolveAssetSource = _require(_dependencyMap[0], "react-native/Libraries/Image/resolveAssetSource");

  var _resolveAssetSource2 = _interopRequireDefault(_resolveAssetSource);

  var _propTypes = _require(_dependencyMap[1], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var ARTrackingTargetsModule = _require(_dependencyMap[2], 'react-native').NativeModules.VRTARTrackingTargetsModule;

  var ARTrackingTargetsPropTypes = {
    source: _propTypes2.default.oneOfType([_propTypes2.default.shape({
      uri: _propTypes2.default.string
    }), _propTypes2.default.number]).isRequired,
    orientation: _propTypes2.default.oneOf(['Up', 'Down', 'Left', 'Right']),
    physicalWidth: _propTypes2.default.number
  };

  var ViroARTrackingTargets = function () {
    function ViroARTrackingTargets() {
      _classCallCheck(this, ViroARTrackingTargets);
    }

    _createClass(ViroARTrackingTargets, null, [{
      key: "createTargets",
      value: function createTargets(targets) {
        for (var key in targets) {
          var target = targets[key];
          ViroARTrackingTargets.checkForRequiredProps(key, target);
          var resultSource = (0, _resolveAssetSource2.default)(target.source);
          target.source = resultSource;
        }

        ARTrackingTargetsModule.createTargets(targets);
      }
    }, {
      key: "checkForRequiredProps",
      value: function checkForRequiredProps(key, target) {
        if (target.source == undefined) {
          console.error("ViroTrackingTarget [" + target + "] requires a `source` property");
        }

        if (target.physicalWidth == undefined) {
          console.error("ViroTrackingTarget [" + target + "] requires a `physicalWidth` property");
        }
      }
    }, {
      key: "deleteTarget",
      value: function deleteTarget(targetName) {
        ARTrackingTargetsModule.deleteTarget(targetName);
      }
    }]);

    return ViroARTrackingTargets;
  }();

  module.exports = ViroARTrackingTargets;
});