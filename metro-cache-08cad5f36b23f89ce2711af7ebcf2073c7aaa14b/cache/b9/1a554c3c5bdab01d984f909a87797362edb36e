__d(function (global, _require, module, exports, _dependencyMap) {
  var _jsxFileName = "/home/nooreddein/Desktop/ViroSample/node_modules/react-viro/components/ViroScene.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _react = _require(_dependencyMap[1], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var NativeModules = _require(_dependencyMap[0], 'react-native').NativeModules;

  var createReactClass = _require(_dependencyMap[3], 'create-react-class');

  var ViroScene = createReactClass({
    displayName: "ViroScene",
    propTypes: _extends({}, _reactNative.View.propTypes, {
      onHover: _propTypes2.default.func,
      onClick: _propTypes2.default.func,
      onClickState: _propTypes2.default.func,
      onTouch: _propTypes2.default.func,
      onScroll: _propTypes2.default.func,
      onSwipe: _propTypes2.default.func,
      onFuse: _propTypes2.default.oneOfType([_propTypes2.default.shape({
        callback: _propTypes2.default.func.isRequired,
        timeToFuse: _propTypes2.default.number
      }), _propTypes2.default.func]),
      onDrag: _propTypes2.default.func,
      onPinch: _propTypes2.default.func,
      onRotate: _propTypes2.default.func,
      onPlatformUpdate: _propTypes2.default.func,
      ignoreEventHandling: _propTypes2.default.bool,
      dragType: _propTypes2.default.oneOf(["FixedDistance", "FixedToWorld"]),
      soundRoom: _propTypes2.default.shape({
        size: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
        wallMaterial: _propTypes2.default.string,
        ceilingMaterial: _propTypes2.default.string,
        floorMaterial: _propTypes2.default.string
      }),
      physicsWorld: _propTypes2.default.shape({
        gravity: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
        drawBounds: _propTypes2.default.bool
      }),
      postProcessEffects: _propTypes2.default.arrayOf(_propTypes2.default.string)
    }),
    _onHover: function _onHover(event) {
      this.props.onHover && this.props.onHover(event.nativeEvent.isHovering, event.nativeEvent.position, event.nativeEvent.source);
    },
    _onClick: function _onClick(event) {
      this.props.onClick && this.props.onClick(event.nativeEvent.position, event.nativeEvent.source);
    },
    _onClickState: function _onClickState(event) {
      this.props.onClickState && this.props.onClickState(event.nativeEvent.clickState, event.nativeEvent.position, event.nativeEvent.source);
      var CLICKED = 3;

      if (event.nativeEvent.clickState == CLICKED) {
        this._onClick(event);
      }
    },
    _onTouch: function _onTouch(event) {
      this.props.onTouch && this.props.onTouch(event.nativeEvent.touchState, event.nativeEvent.touchPos, event.nativeEvent.source);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event.nativeEvent.scrollPos, event.nativeEvent.source);
    },
    _onSwipe: function _onSwipe(event) {
      this.props.onSwipe && this.props.onSwipe(event.nativeEvent.swipeState, event.nativeEvent.source);
    },
    _onFuse: function _onFuse(event) {
      if (this.props.onFuse) {
        if (typeof this.props.onFuse === 'function') {
          this.props.onFuse(event.nativeEvent.source);
        } else if (this.props.onFuse != undefined && this.props.onFuse.callback != undefined) {
          this.props.onFuse.callback(event.nativeEvent.source);
        }
      }
    },
    _onPinch: function _onPinch(event) {
      this.props.onPinch && this.props.onPinch(event.nativeEvent.pinchState, event.nativeEvent.scaleFactor, event.nativeEvent.source);
    },
    _onRotate: function _onRotate(event) {
      this.props.onRotate && this.props.onRotate(event.nativeEvent.rotateState, event.nativeEvent.rotationFactor, event.nativeEvent.source);
    },
    _onDrag: function _onDrag(event) {
      this.props.onDrag && this.props.onDrag(event.nativeEvent.dragToPos, event.nativeEvent.source);
    },
    _onPlatformUpdate: function _onPlatformUpdate(event) {
      event.nativeEvent.platformInfoViro.vrPlatform = event.nativeEvent.platformInfoViro.platform;
      this.props.onPlatformUpdate && this.props.onPlatformUpdate(event.nativeEvent.platformInfoViro);
    },
    findCollisionsWithRayAsync: function findCollisionsWithRayAsync(from, to, closest, viroTag) {
      return regeneratorRuntime.async(function findCollisionsWithRayAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(NativeModules.VRTSceneModule.findCollisionsWithRayAsync((0, _reactNative.findNodeHandle)(this), from, to, closest, viroTag));

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    findCollisionsWithShapeAsync: function findCollisionsWithShapeAsync(from, to, shapeString, shapeParam, viroTag) {
      return regeneratorRuntime.async(function findCollisionsWithShapeAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(NativeModules.VRTSceneModule.findCollisionsWithShapeAsync((0, _reactNative.findNodeHandle)(this), from, to, shapeString, shapeParam, viroTag));

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    },
    getCameraPositionAsync: function getCameraPositionAsync() {
      var orientation;
      return regeneratorRuntime.async(function getCameraPositionAsync$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              console.warn("[Viro] ViroScene.getCameraPositionAsync has been DEPRECATED. Please use getCameraOrientationAsync instead.");
              _context3.next = 3;
              return regeneratorRuntime.awrap(NativeModules.VRTCameraModule.getCameraOrientation((0, _reactNative.findNodeHandle)(this)));

            case 3:
              orientation = _context3.sent;
              position = [orientation[0], orientation[1], orientation[2]];
              return _context3.abrupt("return", position);

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    },
    getCameraOrientationAsync: function getCameraOrientationAsync() {
      var orientation;
      return regeneratorRuntime.async(function getCameraOrientationAsync$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return regeneratorRuntime.awrap(NativeModules.VRTCameraModule.getCameraOrientation((0, _reactNative.findNodeHandle)(this)));

            case 2:
              orientation = _context4.sent;
              return _context4.abrupt("return", {
                position: [orientation[0], orientation[1], orientation[2]],
                rotation: [orientation[3], orientation[4], orientation[5]],
                forward: [orientation[6], orientation[7], orientation[8]],
                up: [orientation[9], orientation[10], orientation[11]]
              });

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    },
    getChildContext: function getChildContext() {
      return {
        cameraDidMount: function (camera) {
          if (camera.props.active) {
            NativeModules.VRTCameraModule.setSceneCamera((0, _reactNative.findNodeHandle)(this), (0, _reactNative.findNodeHandle)(camera));
          }
        }.bind(this),
        cameraWillUnmount: function (camera) {
          if (camera.props.active) {
            NativeModules.VRTCameraModule.removeSceneCamera((0, _reactNative.findNodeHandle)(this), (0, _reactNative.findNodeHandle)(camera));
          }
        }.bind(this),
        cameraWillReceiveProps: function (camera, nextProps) {
          if (nextProps.active) {
            NativeModules.VRTCameraModule.setSceneCamera((0, _reactNative.findNodeHandle)(this), (0, _reactNative.findNodeHandle)(camera));
          } else {
            NativeModules.VRTCameraModule.removeSceneCamera((0, _reactNative.findNodeHandle)(this), (0, _reactNative.findNodeHandle)(camera));
          }
        }.bind(this)
      };
    },
    render: function render() {
      var _this = this;

      var timeToFuse = undefined;

      if (this.props.onFuse != undefined && typeof this.props.onFuse === 'object') {
        timeToFuse = this.props.onFuse.timeToFuse;
      }

      return _react2.default.createElement(VRTScene, _extends({}, this.props, {
        ref: function ref(component) {
          _this._component = component;
        },
        canHover: this.props.onHover != undefined,
        canClick: this.props.onClick != undefined || this.props.onClickState != undefined,
        canTouch: this.props.onTouch != undefined,
        canScroll: this.props.onScroll != undefined,
        canSwipe: this.props.onSwipe != undefined,
        canFuse: this.props.onFuse != undefined,
        canDrag: this.props.onDrag != undefined,
        canPinch: this.props.onPinch != undefined,
        canRotate: this.props.onRotate != undefined,
        onHoverViro: this._onHover,
        onClickViro: this._onClickState,
        onTouchViro: this._onTouch,
        onScrollViro: this._onScroll,
        onSwipeViro: this._onSwipe,
        onFuseViro: this._onFuse,
        onDragViro: this._onDrag,
        onRotateViro: this._onRotate,
        onPinchViro: this._onPinch,
        onPlatformUpdateViro: this._onPlatformUpdate,
        timeToFuse: timeToFuse,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 173
        }
      }));
    }
  });
  ViroScene.childContextTypes = {
    cameraDidMount: _propTypes2.default.func,
    cameraWillUnmount: _propTypes2.default.func,
    cameraWillReceiveProps: _propTypes2.default.func
  };
  var VRTScene = (0, _reactNative.requireNativeComponent)('VRTScene', ViroScene, {
    nativeOnly: {
      canHover: true,
      canClick: true,
      canTouch: true,
      canScroll: true,
      canSwipe: true,
      canDrag: true,
      canPinch: true,
      canRotate: true,
      canFuse: true,
      canCollide: true,
      onHoverViro: true,
      onClickViro: true,
      onTouchViro: true,
      onScrollViro: true,
      onSwipeViro: true,
      onDragViro: true,
      onPinchViro: true,
      onRotateViro: true,
      onPlatformUpdateViro: true,
      onFuseViro: true,
      timeToFuse: true,
      physicsBody: true,
      onCollisionViro: true
    }
  });
  module.exports = ViroScene;
});