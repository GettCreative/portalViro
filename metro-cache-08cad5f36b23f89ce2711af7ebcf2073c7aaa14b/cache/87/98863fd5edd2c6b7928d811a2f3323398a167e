__d(function (global, _require, module, exports, _dependencyMap) {
  var _jsxFileName = "/home/nooreddein/Desktop/ViroSample/node_modules/react-viro/components/AR/ViroARScene.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _resolveAssetSource = _require(_dependencyMap[1], "react-native/Libraries/Image/resolveAssetSource");

  var _resolveAssetSource2 = _interopRequireDefault(_resolveAssetSource);

  var _react = _require(_dependencyMap[2], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var NativeModules = _require(_dependencyMap[0], 'react-native').NativeModules;

  var createReactClass = _require(_dependencyMap[4], 'create-react-class');

  var ViroConstants = _require(_dependencyMap[5], '../ViroConstants');

  var ViroARScene = createReactClass({
    displayName: "ViroARScene",
    propTypes: _extends({}, _reactNative.View.propTypes, {
      displayPointCloud: _propTypes2.default.oneOfType([_propTypes2.default.shape({
        imageSource: _propTypes2.default.oneOfType([_propTypes2.default.shape({
          uri: _propTypes2.default.string
        }), _propTypes2.default.number]),
        imageScale: _propTypes2.default.arrayOf(_propTypes2.default.number),
        maxPoints: _propTypes2.default.number
      }), _propTypes2.default.bool]),
      ignoreEventHandling: _propTypes2.default.bool,
      anchorDetectionTypes: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string]),
      dragType: _propTypes2.default.oneOf(["FixedDistance", "FixedToWorld"]),
      onHover: _propTypes2.default.func,
      onClick: _propTypes2.default.func,
      onClickState: _propTypes2.default.func,
      onTouch: _propTypes2.default.func,
      onScroll: _propTypes2.default.func,
      onSwipe: _propTypes2.default.func,
      onDrag: _propTypes2.default.func,
      onPinch: _propTypes2.default.func,
      onRotate: _propTypes2.default.func,
      onCameraARHitTest: _propTypes2.default.func,
      onARPointCloudUpdate: _propTypes2.default.func,
      onFuse: _propTypes2.default.oneOfType([_propTypes2.default.shape({
        callback: _propTypes2.default.func.isRequired,
        timeToFuse: _propTypes2.default.number
      }), _propTypes2.default.func]),
      onTrackingUpdated: _propTypes2.default.func,
      onPlatformUpdate: _propTypes2.default.func,
      onAmbientLightUpdate: _propTypes2.default.func,
      onAnchorFound: _propTypes2.default.func,
      onAnchorUpdated: _propTypes2.default.func,
      onAnchorRemoved: _propTypes2.default.func,
      soundRoom: _propTypes2.default.shape({
        size: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
        wallMaterial: _propTypes2.default.string,
        ceilingMaterial: _propTypes2.default.string,
        floorMaterial: _propTypes2.default.string
      }),
      physicsWorld: _propTypes2.default.shape({
        gravity: _propTypes2.default.arrayOf(_propTypes2.default.number).isRequired,
        drawBounds: _propTypes2.default.bool
      }),
      postProcessEffects: _propTypes2.default.arrayOf(_propTypes2.default.string),
      onTrackingInitialized: _propTypes2.default.func
    }),
    _onHover: function _onHover(event) {
      this.props.onHover && this.props.onHover(event.nativeEvent.isHovering, event.nativeEvent.position, event.nativeEvent.source);
    },
    _onClick: function _onClick(event) {
      this.props.onClick && this.props.onClick(event.nativeEvent.position, event.nativeEvent.source);
    },
    _onClickState: function _onClickState(event) {
      this.props.onClickState && this.props.onClickState(event.nativeEvent.clickState, event.nativeEvent.position, event.nativeEvent.source);
      var CLICKED = 3;

      if (event.nativeEvent.clickState == CLICKED) {
        this._onClick(event);
      }
    },
    _onTouch: function _onTouch(event) {
      this.props.onTouch && this.props.onTouch(event.nativeEvent.touchState, event.nativeEvent.touchPos, event.nativeEvent.source);
    },
    _onScroll: function _onScroll(event) {
      this.props.onScroll && this.props.onScroll(event.nativeEvent.scrollPos, event.nativeEvent.source);
    },
    _onSwipe: function _onSwipe(event) {
      this.props.onSwipe && this.props.onSwipe(event.nativeEvent.swipeState, event.nativeEvent.source);
    },
    _onPinch: function _onPinch(event) {
      this.props.onPinch && this.props.onPinch(event.nativeEvent.pinchState, event.nativeEvent.scaleFactor, event.nativeEvent.source);
    },
    _onRotate: function _onRotate(event) {
      this.props.onRotate && this.props.onRotate(event.nativeEvent.rotateState, event.nativeEvent.rotationFactor, event.nativeEvent.source);
    },
    _onCameraARHitTest: function _onCameraARHitTest(event) {
      var hitTestEventObj = {
        hitTestResults: event.nativeEvent.hitTestResults,
        cameraOrientation: {
          position: [event.nativeEvent.cameraOrientation[0], event.nativeEvent.cameraOrientation[1], event.nativeEvent.cameraOrientation[2]],
          rotation: [event.nativeEvent.cameraOrientation[3], event.nativeEvent.cameraOrientation[4], event.nativeEvent.cameraOrientation[5]],
          forward: [event.nativeEvent.cameraOrientation[6], event.nativeEvent.cameraOrientation[7], event.nativeEvent.cameraOrientation[8]],
          up: [event.nativeEvent.cameraOrientation[9], event.nativeEvent.cameraOrientation[10], event.nativeEvent.cameraOrientation[11]]
        }
      };
      this.props.onCameraARHitTest && this.props.onCameraARHitTest(hitTestEventObj);
    },
    _onARPointCloudUpdate: function _onARPointCloudUpdate(event) {
      this.props.onARPointCloudUpdate && this.props.onARPointCloudUpdate(event.nativeEvent.pointCloud);
    },
    _onDrag: function _onDrag(event) {
      this.props.onDrag && this.props.onDrag(event.nativeEvent.dragToPos, event.nativeEvent.source);
    },
    _onFuse: function _onFuse(event) {
      if (this.props.onFuse) {
        if (typeof this.props.onFuse === 'function') {
          this.props.onFuse(event.nativeEvent.source);
        } else if (this.props.onFuse != undefined && this.props.onFuse.callback != undefined) {
          this.props.onFuse.callback(event.nativeEvent.source);
        }
      }
    },
    _onPlatformUpdate: function _onPlatformUpdate(event) {
      this.props.onPlatformUpdate && this.props.onPlatformUpdate(event.nativeEvent.platformInfoViro);
    },
    componentDidMount: function componentDidMount() {
      this.onTrackingFirstInitialized = false;
    },
    _onTrackingUpdated: function _onTrackingUpdated(event) {
      if (this.props.onTrackingUpdated) {
        this.props.onTrackingUpdated(event.nativeEvent.state, event.nativeEvent.reason);
      }

      if ((event.nativeEvent.state == ViroConstants.TRACKING_LIMITED || event.nativeEvent.state == ViroConstants.TRACKING_NORMAL) && !this.onTrackingFirstInitialized) {
        this.onTrackingFirstInitialized = true;

        if (this.props.onTrackingInitialized) {
          this.props.onTrackingInitialized();
        }
      }
    },
    _onTrackingInitialized: function _onTrackingInitialized(event) {
      this.props.onTrackingInitialized && this.props.onTrackingInitialized();
    },
    _onAmbientLightUpdate: function _onAmbientLightUpdate(event) {
      this.props.onAmbientLightUpdate && this.props.onAmbientLightUpdate(event.nativeEvent.ambientLightInfo);
    },
    _onAnchorFound: function _onAnchorFound(event) {
      this.props.onAnchorFound && this.props.onAnchorFound(event.nativeEvent.anchor);
    },
    _onAnchorUpdated: function _onAnchorUpdated(event) {
      this.props.onAnchorUpdated && this.props.onAnchorUpdated(event.nativeEvent.anchor);
    },
    _onAnchorRemoved: function _onAnchorRemoved(event) {
      this.props.onAnchorRemoved && this.props.onAnchorRemoved(event.nativeEvent.anchor);
    },
    findCollisionsWithRayAsync: function findCollisionsWithRayAsync(from, to, closest, viroTag) {
      return regeneratorRuntime.async(function findCollisionsWithRayAsync$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(NativeModules.VRTSceneModule.findCollisionsWithRayAsync((0, _reactNative.findNodeHandle)(this), from, to, closest, viroTag));

            case 2:
              return _context.abrupt("return", _context.sent);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    },
    findCollisionsWithShapeAsync: function findCollisionsWithShapeAsync(from, to, shapeString, shapeParam, viroTag) {
      return regeneratorRuntime.async(function findCollisionsWithShapeAsync$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return regeneratorRuntime.awrap(NativeModules.VRTSceneModule.findCollisionsWithShapeAsync((0, _reactNative.findNodeHandle)(this), from, to, shapeString, shapeParam, viroTag));

            case 2:
              return _context2.abrupt("return", _context2.sent);

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    },
    performARHitTestWithRay: function performARHitTestWithRay(ray) {
      return regeneratorRuntime.async(function performARHitTestWithRay$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return regeneratorRuntime.awrap(NativeModules.VRTARSceneModule.performARHitTestWithRay((0, _reactNative.findNodeHandle)(this), ray));

            case 2:
              return _context3.abrupt("return", _context3.sent);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, null, this);
    },
    performARHitTestWithPosition: function performARHitTestWithPosition(position) {
      return regeneratorRuntime.async(function performARHitTestWithPosition$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return regeneratorRuntime.awrap(NativeModules.VRTARSceneModule.performARHitTestWithPosition((0, _reactNative.findNodeHandle)(this), position));

            case 2:
              return _context4.abrupt("return", _context4.sent);

            case 3:
            case "end":
              return _context4.stop();
          }
        }
      }, null, this);
    },
    performARHitTestWithPoint: function performARHitTestWithPoint(x, y) {
      return regeneratorRuntime.async(function performARHitTestWithPoint$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return regeneratorRuntime.awrap(NativeModules.VRTARSceneModule.performARHitTestWithPoint((0, _reactNative.findNodeHandle)(this), x, y));

            case 2:
              return _context5.abrupt("return", _context5.sent);

            case 3:
            case "end":
              return _context5.stop();
          }
        }
      }, null, this);
    },
    getCameraPositionAsync: function getCameraPositionAsync() {
      var orientation;
      return regeneratorRuntime.async(function getCameraPositionAsync$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              console.warn("[Viro] ViroARScene.getCameraPositionAsync has been DEPRECATED. Please use getCameraOrientationAsync instead.");
              _context6.next = 3;
              return regeneratorRuntime.awrap(NativeModules.VRTCameraModule.getCameraOrientation((0, _reactNative.findNodeHandle)(this)));

            case 3:
              orientation = _context6.sent;
              position = [orientation[0], orientation[1], orientation[2]];
              return _context6.abrupt("return", position);

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, null, this);
    },
    getCameraOrientationAsync: function getCameraOrientationAsync() {
      var orientation;
      return regeneratorRuntime.async(function getCameraOrientationAsync$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return regeneratorRuntime.awrap(NativeModules.VRTCameraModule.getCameraOrientation((0, _reactNative.findNodeHandle)(this)));

            case 2:
              orientation = _context7.sent;
              return _context7.abrupt("return", {
                position: [orientation[0], orientation[1], orientation[2]],
                rotation: [orientation[3], orientation[4], orientation[5]],
                forward: [orientation[6], orientation[7], orientation[8]],
                up: [orientation[9], orientation[10], orientation[11]]
              });

            case 4:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this);
    },
    getCameraPositionAsync: function getCameraPositionAsync() {
      return regeneratorRuntime.async(function getCameraPositionAsync$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return regeneratorRuntime.awrap(ViroCameraModule.getCameraPosition((0, _reactNative.findNodeHandle)(this)));

            case 2:
              return _context8.abrupt("return", _context8.sent);

            case 3:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this);
    },
    getChildContext: function getChildContext() {
      return {
        cameraDidMount: function (camera) {
          if (camera.props.active) {
            ViroCameraModule.setSceneCamera((0, _reactNative.findNodeHandle)(this), (0, _reactNative.findNodeHandle)(camera));
          }
        }.bind(this),
        cameraWillUnmount: function (camera) {
          if (camera.props.active) {
            ViroCameraModule.removeSceneCamera((0, _reactNative.findNodeHandle)(this), (0, _reactNative.findNodeHandle)(camera));
          }
        }.bind(this),
        cameraWillReceiveProps: function (camera, nextProps) {
          if (nextProps.active) {
            ViroCameraModule.setSceneCamera((0, _reactNative.findNodeHandle)(this), (0, _reactNative.findNodeHandle)(camera));
          } else {
            ViroCameraModule.removeSceneCamera((0, _reactNative.findNodeHandle)(this), (0, _reactNative.findNodeHandle)(camera));
          }
        }.bind(this)
      };
    },
    render: function render() {
      var anchorDetectionTypes = typeof this.props.anchorDetectionTypes === 'string' ? new Array(this.props.anchorDetectionTypes) : this.props.anchorDetectionTypes;
      var timeToFuse = undefined;

      if (this.props.onFuse != undefined && typeof this.props.onFuse === 'object') {
        timeToFuse = this.props.onFuse.timeToFuse;
      }

      var displayPointCloud = false;
      var pointCloudImage = undefined;
      var pointCloudScale = undefined;
      var pointCloudMaxPoints = undefined;

      if (this.props.displayPointCloud) {
        displayPointCloud = true;
        pointCloudImage = (0, _resolveAssetSource2.default)(this.props.displayPointCloud.imageSource);
        pointCloudScale = this.props.displayPointCloud.imageScale;
        pointCloudMaxPoints = this.props.displayPointCloud.maxPoints;
      }

      if (this.props.onTrackingInitialized && !this.onTrackingFirstInitialized) {
        console.warn("[Viro] ViroARScene.onTrackingInitialized() has been DEPRECATED. Please use onTrackingUpdated() instead.");
      }

      return _react2.default.createElement(VRTARScene, _extends({}, this.props, {
        canHover: this.props.onHover != undefined,
        canClick: this.props.onClick != undefined || this.props.onClickState != undefined,
        canTouch: this.props.onTouch != undefined,
        canScroll: this.props.onScroll != undefined,
        canSwipe: this.props.onSwipe != undefined,
        canDrag: this.props.onDrag != undefined,
        canPinch: this.props.onPinch != undefined,
        canRotate: this.props.onRotate != undefined,
        canFuse: this.props.onFuse != undefined,
        canCameraARHitTest: this.props.onCameraARHitTest != undefined,
        canARPointCloudUpdate: this.props.onARPointCloudUpdate != undefined,
        onHoverViro: this._onHover,
        onClickViro: this._onClickState,
        onTouchViro: this._onTouch,
        onScrollViro: this._onScroll,
        onSwipeViro: this._onSwipe,
        onDragViro: this._onDrag,
        onPinchViro: this._onPinch,
        onRotateViro: this._onRotate,
        onFuseViro: this._onFuse,
        onCameraARHitTestViro: this._onCameraARHitTest,
        onARPointCloudUpdateViro: this._onARPointCloudUpdate,
        onPlatformUpdateViro: this._onPlatformUpdate,
        onTrackingUpdatedViro: this._onTrackingUpdated,
        onAmbientLightUpdateViro: this._onAmbientLightUpdate,
        onAnchorFoundViro: this._onAnchorFound,
        onAnchorUpdatedViro: this._onAnchorUpdated,
        onAnchorRemovedViro: this._onAnchorRemoved,
        timeToFuse: timeToFuse,
        anchorDetectionTypes: anchorDetectionTypes,
        displayPointCloud: displayPointCloud,
        pointCloudImage: pointCloudImage,
        pointCloudScale: pointCloudScale,
        pointCloudMaxPoints: pointCloudMaxPoints,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 300
        }
      }));
    }
  });
  ViroARScene.childContextTypes = {
    cameraDidMount: _propTypes2.default.func,
    cameraWillUnmount: _propTypes2.default.func,
    cameraWillReceiveProps: _propTypes2.default.func
  };
  var VRTARScene = (0, _reactNative.requireNativeComponent)('VRTARScene', ViroARScene, {
    nativeOnly: {
      canHover: true,
      canClick: true,
      canTouch: true,
      canScroll: true,
      canSwipe: true,
      canDrag: true,
      canPinch: true,
      canRotate: true,
      canFuse: true,
      canCameraARHitTest: true,
      canARPointCloudUpdate: true,
      onHoverViro: true,
      onClickViro: true,
      onTouchViro: true,
      onScrollViro: true,
      onSwipeViro: true,
      onDragViro: true,
      onPinchViro: true,
      onRotateViro: true,
      onFuseViro: true,
      onPlatformUpdateViro: true,
      onTrackingInitializedViro: true,
      onTrackingUpdatedViro: true,
      onAmbientLightUpdateViro: true,
      onAnchorFoundViro: true,
      onAnchorUpdatedViro: true,
      onAnchorRemovedViro: true,
      onCameraARHitTestViro: true,
      onARPointCloudUpdateViro: true,
      timeToFuse: true,
      pointCloudImage: true,
      pointCloudScale: true,
      pointCloudMaxPoints: true
    }
  });
  module.exports = ViroARScene;
});