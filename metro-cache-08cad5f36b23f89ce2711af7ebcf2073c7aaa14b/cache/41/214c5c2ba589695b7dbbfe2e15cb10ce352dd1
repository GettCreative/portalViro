__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  var _jsxFileName = "/home/nooreddein/Desktop/ViroSample/node_modules/react-viro/components/ViroSound.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _reactNative = _require(_dependencyMap[0], "react-native");

  var _resolveAssetSource = _require(_dependencyMap[1], "react-native/Libraries/Image/resolveAssetSource");

  var _resolveAssetSource2 = _interopRequireDefault(_resolveAssetSource);

  var _react = _require(_dependencyMap[2], "react");

  var _react2 = _interopRequireDefault(_react);

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var NativeModules = _require(_dependencyMap[0], 'react-native').NativeModules;

  var createReactClass = _require(_dependencyMap[4], 'create-react-class');

  var SoundModule = NativeModules.VRTSoundModule;
  var ViroSound = createReactClass({
    displayName: "ViroSound",
    statics: {
      preloadSounds: function preloadSounds(soundMap) {
        var results, index, response;
        return regeneratorRuntime.async(function preloadSounds$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                results = {};
                _context.t0 = regeneratorRuntime.keys(soundMap);

              case 2:
                if ((_context.t1 = _context.t0()).done) {
                  _context.next = 10;
                  break;
                }

                index = _context.t1.value;
                _context.next = 6;
                return regeneratorRuntime.awrap(SoundModule.preloadSounds(_defineProperty({}, index, soundMap[index])));

              case 6:
                response = _context.sent;
                results[response.key] = {
                  result: response.result,
                  msg: response.msg
                };
                _context.next = 2;
                break;

              case 10:
                return _context.abrupt("return", results);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      },
      unloadSounds: function unloadSounds(soundKeys) {
        SoundModule.unloadSounds(soundKeys);
      }
    },
    propTypes: _extends({}, _reactNative.View.propTypes, {
      source: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
        uri: _propTypes2.default.string
      }), _propTypes2.default.number]).isRequired,
      paused: _propTypes2.default.bool,
      loop: _propTypes2.default.bool,
      muted: _propTypes2.default.bool,
      volume: _propTypes2.default.number,
      onFinish: _propTypes2.default.func,
      onError: _propTypes2.default.func
    }),
    _onFinish: function _onFinish(event) {
      this.props.onFinish && this.props.onFinish(event);
    },
    _onError: function _onError(event) {
      this.props.onError && this.props.onError(event);
    },
    setNativeProps: function setNativeProps(nativeProps) {
      this._component.setNativeProps(nativeProps);
    },
    render: function render() {
      var _this = this;

      var soundSrc = this.props.source;

      if (typeof soundSrc === 'number') {
        soundSrc = (0, _resolveAssetSource2.default)(soundSrc);
      } else if (typeof soundSrc === 'string') {
        soundSrc = {
          name: soundSrc
        };
      }

      var nativeProps = _extends({}, this.props);

      nativeProps.source = soundSrc;
      nativeProps.onFinishViro = this._onFinish;
      nativeProps.onErrorViro = this._onError;

      nativeProps.ref = function (component) {
        _this._component = component;
      };

      return _react2.default.createElement(VRTSound, _extends({}, nativeProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }));
    },
    seekToTime: function seekToTime(timeInSeconds) {
      switch (_reactNative.Platform.OS) {
        case 'ios':
          NativeModules.VRTSoundManager.seekToTime((0, _reactNative.findNodeHandle)(this), timeInSeconds);
          break;

        case 'android':
          NativeModules.UIManager.dispatchViewManagerCommand((0, _reactNative.findNodeHandle)(this), NativeModules.UIManager.VRTSound.Commands.seekToTime, [timeInSeconds]);
          break;
      }
    }
  });
  var VRTSound = (0, _reactNative.requireNativeComponent)('VRTSound', ViroSound, {
    nativeOnly: {
      onFinishViro: true,
      onErrorViro: true
    }
  });
  module.exports = ViroSound;
  module.exports.VRTSound = VRTSound;
});