__d(function (global, _require, module, exports, _dependencyMap) {
    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[0], "react-native");

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var AnimationManager = _require(_dependencyMap[0], 'react-native').NativeModules.VRTAnimationManager;

    var AnimationValidation = _require(_dependencyMap[1], './ViroAnimationValidation');

    var ViroAnimations = function () {
        function ViroAnimations() {
            _classCallCheck(this, ViroAnimations);
        }

        _createClass(ViroAnimations, null, [{
            key: "registerAnimations",
            value: function registerAnimations(animations) {
                var result = {};

                for (var key in animations) {
                    if (animations[key].constructor === Array) {
                        AnimationValidation.validateAnimationChain(key, animations);
                    } else {
                        AnimationValidation.validateAnimation(key, animations);

                        if (animations[key].properties && animations[key].properties.color) {
                            var newColor = (0, _reactNative.processColor)(animations[key].properties.color);
                            animations[key].properties.color = newColor;
                        }
                    }
                }

                AnimationManager.setJSAnimations(animations);
            }
        }]);

        return ViroAnimations;
    }();

    module.exports = ViroAnimations;
});